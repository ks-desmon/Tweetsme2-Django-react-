{"version":3,"sources":["logo.svg","tweets/component.js","lookup/compoment.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","type","TweetList","tweetsInit","setTweetInit","tweets","setTweets","useEffect","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","message","send","loadTweets","alert","final","concat","length","map","item","index","Tweet","tweet","key","classname","ActionBtn","action","display","setlikes","userlike","setuserlike","actiondisplay","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.54963fad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport { loadTweets } from \"../lookup\";\r\n\r\n// This Form componemt\r\nexport function TweetsComponent(props) {\r\n  const textAreaRef = React.createRef();\r\n  const [newTweets, setNewTweets] = useState([]);\r\n  // collect the value from textare\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const newVal = textAreaRef.current.value;\r\n    let tempNewTweets = [...newTweets];\r\n    // save data to server end\r\n    tempNewTweets.unshift({\r\n      content: newVal,\r\n      likes: 0,\r\n      id: 123,\r\n    });\r\n    setNewTweets(tempNewTweets);\r\n    textAreaRef.current.value = \"\";\r\n  };\r\n  // Rendering form and list of tweets\r\n  return (\r\n    <div className={props.className}>\r\n      <div className=\"col-12 mb-3\">\r\n        <form onSubmit={handleSubmit}>\r\n          <textarea\r\n            ref={textAreaRef}\r\n            required={true}\r\n            className=\"form-control\"\r\n          ></textarea>\r\n          <button type=\"submit\" className=\"btn btn-primary my-3\">\r\n            Tweet\r\n          </button>\r\n        </form>\r\n      </div>\r\n      {/* contains list of tweets */}\r\n      <TweetList newTweets={newTweets} />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Gettuing the http response data and redring them\r\nexport function TweetList(props) {\r\n  const [tweetsInit, setTweetInit] = useState([]);\r\n  const [tweets, setTweets] = useState([]);\r\n\r\n  // Will get the response data from response and set inside a state tweetsInit\r\n\r\n  useEffect(() => {\r\n    const mycallback = (response, status) => {\r\n      if (status === 200) {\r\n        setTweetInit(response);\r\n      } else {\r\n        alert(\"there was an error\");\r\n      }\r\n    };\r\n    loadTweets(mycallback);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // concate the data and new data\r\n    let final = [...props.newTweets].concat(tweetsInit);\r\n\r\n    //setting the concat data into new hook tweets // if condition in for second time\r\n    if (final.length !== tweets.length) {\r\n      setTweets(final);\r\n    }\r\n  }, [tweetsInit, props.newTweets, tweets]);\r\n\r\n  // looping through data one by one to sending Tweet for creating html\r\n\r\n  return tweets.map((item, index) => {\r\n    return (\r\n      <Tweet\r\n        tweet={item}\r\n        key={index}\r\n        className=\"my-5 py-5 border bg-white text-dark\"\r\n      />\r\n    );\r\n  });\r\n}\r\n\r\n// creating the div for eact div and passing data further to create buttons\r\n\r\nexport function Tweet(props) {\r\n  const { tweet } = props;\r\n  const className = \"col-10 col-md-12 mx-auto\";\r\n  const classname = props.className ? props.className : className;\r\n  return (\r\n    <div className={classname}>\r\n      <p>\r\n        {tweet.id} - {tweet.content}\r\n      </p>\r\n\r\n      {/* calling buttons here and passing the data */}\r\n\r\n      <div className=\"btn btn-group \">\r\n        <ActionBtn tweet={tweet} action={{ type: \"like\", display: \"like\" }} />\r\n        <ActionBtn\r\n          tweet={tweet}\r\n          action={{ type: \"unlike\", display: \"unlike\" }}\r\n        />\r\n        <ActionBtn\r\n          tweet={tweet}\r\n          action={{ type: \"retweet\", display: \"retweet\" }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Returning buttons to Tweet\r\n\r\nexport function ActionBtn(props) {\r\n  const { tweet, action } = props;\r\n  const className = \"btn btn-primary\";\r\n\r\n  // If value comming as undefine convert it in to zero\r\n\r\n  const [likes, setlikes] = useState(tweet.likes ? tweet.likes : 0);\r\n\r\n  // toggeling for like button\r\n\r\n  const [userlike, setuserlike] = useState(\r\n    tweet.userlike === true ? true : false\r\n  );\r\n\r\n  const classname = props.className ? props.className : className;\r\n  // setting the actiondisplay to check wether action is comming or not\r\n  const actiondisplay = action.display ? action.display : \"Action\";\r\n\r\n  // already liked can not be liked again first it will be dislike\r\n  const handleClike = (event) => {\r\n    event.preventDefault();\r\n    if (action.type === \"like\") {\r\n      if (userlike === true) {\r\n        setlikes(likes - 1);\r\n        setuserlike(false);\r\n      } else {\r\n        setlikes(tweet.likes + 1);\r\n        setuserlike(true);\r\n      }\r\n    }\r\n  };\r\n  // if action is like show numbers of like else show only action\r\n  const display =\r\n    action.type === \"like\" ? `${likes} ${actiondisplay}` : actiondisplay;\r\n  return (\r\n    <button className={classname} onClick={handleClike}>\r\n      {display}\r\n    </button>\r\n  );\r\n}\r\n","export function loadTweets(callback) {\r\n  // Get the data sended by django url and return it to callback obj\r\n  const method = \"GET\";\r\n  const url = \"http://localhost:8000/api/tweets\";\r\n  const responseType = \"json\";\r\n  const xhr = new XMLHttpRequest();\r\n  xhr.responseType = responseType;\r\n  xhr.open(method, url);\r\n  xhr.onload = function () {\r\n    // pushing the data on success\r\n    callback(xhr.response, xhr.status);\r\n  };\r\n  xhr.onerror = (e) => {\r\n    console.log(e);\r\n    // pushing the msg on fain\r\n    callback({ message: \"the request was an error\" }, 400);\r\n  };\r\n  xhr.send();\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { TweetsComponent } from \"./tweets\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { TweetsComponent } from \"./tweets\";\n\nconst appEl = document.getElementById(\"root\");\nif (appEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\n\nconst tweetsEl = document.getElementById(\"tweetme-2\");\nif (tweetsEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <TweetsComponent />\n    </React.StrictMode>,\n    tweetsEl\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}